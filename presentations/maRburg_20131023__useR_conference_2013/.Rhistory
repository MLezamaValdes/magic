library(Rcpp)
->![seamless.png](figures/seamless.png)<-
?grid.raster
library(grid)
?grid.raster
?gp
?gpar
get.gpar()
img <- readPNG("figures/seamless.png")
library(png)
img <- readPNG("figures/seamless.png")
plot(img)
dev.off()
library(knitr)
opts_knit
?opts_knit
for (i in 1:10) {
if (i == 1) {
nIter <- i
} else {
nIter <- nIter + 1
}
}
nIter
sum(1:10)
fibonacci <- function(x) {
if (x < 2) {
return(x)
} else {
return(fibonacci(x-1) + fibonacci(x-2))
}
}
fibonacci(10)
for (i in 1:10) fibonacci(i)
for (i in 1:10) print(fibonacci(i))
sapply(1:10, fibonacci)
library(Rcpp)
cppFunction('int sumC(int x, int y) {
return x + y;
}')
sumC(1, 2)
?identical
identical(3, 3, 3)
identical(3, 3, 4)
identical(3, 4, 4)
all.equal
all.equal(3, 4, 4)
?all.equal
?all.equal(3, c(3, 4))
all.equal(3, c(3, 4))
identical(sum(x, y), c(sumR(x, y), sumC(x, y)))
x <- 5
y <- 10
identical(sum(x, y), c(sumR(x, y), sumC(x, y)))
sumR <- function(x, y) {
return(x + y)
}
identical(sum(x, y), c(sumR(x, y), sumC(x, y)))
c(sumR(x, y), sumC(x, y))
sum(x, y)
identical(sum(x, y), sumR(x, y))
sumC(x, y)
sum(x, y)
class(sumC(x, y))
class(sum(x, y))
cppFunction('double sumC(int x, int y) {
return x + y;
}')
identical(sum(x, y), sumC(x, y))
library(microbenchmark)
install.packages("microbenchmark")
?microbenchmark
library(microbenchmark)
?microbenchmark
a1 <- a2 <- a3 <- a4 <- numeric(0)
res <- microbenchmark(a1 <- c(a1, 1),
a2 <- append(a2, 1),
a3[length(a3) + 1] <- 1,
a4[[length(a4) + 1]] <- 1,
times=100L)
res
microbenchmark(sum(x, y), sumR(x, y), sumC(x, y), times = 10000L)
x <- 5
y <- 10
microbenchmark(sum(x, y), sumR(x, y), sumC(x, y), times = 10000L)
cppFunction('double sumC(int x, int y) {
return x + y;
}')
library(Rcpp)
cppFunction('double sumC(int x, int y) {
return x + y;
}')
microbenchmark(sum(x, y), sumR(x, y), sumC(x, y), times = 10000L)
sumR <- function(x, y) {
return(x + y)
}
microbenchmark(sum(x, y), sumR(x, y), sumC(x, y), times = 10000L)
sum(1:10000)
cppFunction('double sumC(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; ++i) {
total += x[i];
}
return total;
}')
x <- 1:10000
sumC(x)
library(knitr)
?opts_chunk
?options
getOption(width)
getOption("width")
